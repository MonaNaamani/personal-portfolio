---
import MusicPlayer from '../components/MusicPlayer.astro'
import '../styles/global.css'
---

<html lang='en'>
  <head>
    <meta charset='utf-8' />
    <meta name='author' content='Mona Naamani' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='viewport' content='width=device-width' />
    <meta name='generator' content={Astro.generator} />
    <title>Mona Naamani || Portfolio</title>
  </head>
  <body>
    <nav class='navbar'>
      <ul class='right-links'>
        <li><a class='header-link' href='#about-me'> About Me </a></li>
        <li>
          <a class='header-link' href='#featured-work'> Featured Work </a>
        </li>
        <li><a class='header-link' href='#'> Contact Me </a></li>
      </ul>
      <div>
        <MusicPlayer />
      </div>
    </nav>
    <main>
      <slot/>
    </main>
    <div class='footer'>Copyright Â© Mona Naamani 2024</div>
    <script>
      const musicContainer = document.querySelector('.music-container')
      const playBtn = document.querySelector('#play')
      const prevBtn = document.querySelector('#prev')
      const nextBtn = document.querySelector('#next')
      const audio = document.querySelector('#audio')
      const progress = document.querySelector('.progress')
      const progressContainer = document.querySelector('.progress-container')
      const title = document.querySelector('#title')
      const cover = document.querySelector('#cover')

      // song titles
      const songs = ['Intro', 'Daydreaming', 'Wishful-Thinking', 'Isolation']

      // keep track of songs
      let songIndex = 0

      // Initially load song details into DOM
      loadSong(songs[songIndex])

      // update song details
      function loadSong(song) {
        title.innerText = song
        audio.src = `music/${song}.mp3`
        cover.src = `images/${song}.jpg`
      }

      function playSong() {
        musicContainer.classList.add('play')
        audio.play()
      }

      function pauseSong() {
        musicContainer.classList.remove('play')
        audio.pause()
      }

      function prevSong() {
        songIndex--

        if (songIndex < 0) {
          songIndex = songs.length - 1
        }

        loadSong(songs[songIndex])
        playSong()
      }

      function nextSong() {
        songIndex++

        if (songIndex > songs.length - 1) {
          songIndex = 0
        }

        loadSong(songs[songIndex])
        playSong()
      }

      function updateProgress(e) {
        const { duration, currentTime } = e.srcElement
        const progressPercent = (currentTime / duration) * 100
        progress.style.width = `${progressPercent}%`
      }

      function setProgress(e) {
        const width = this.clientWidth
        const clickX = e.offsetX
        const duration = audio.duration

        audio.currentTime = (clickX / width) * duration
      }

      // Event listeners
      playBtn.addEventListener('click', () => {
        const isPlaying = musicContainer.classList.contains('play')

        if (isPlaying) {
          pauseSong()
        } else {
          playSong()
        }
      })

      // Change song events

      prevBtn.addEventListener('click', prevSong)
      nextBtn.addEventListener('click', nextSong)

      audio.addEventListener('timeupdate', updateProgress)

      progressContainer.addEventListener('click', setProgress)

      audio.addEventListener('ended', nextSong)

      // Scroll Animations

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          console.log(entry)
          if (entry.isIntersecting) {
            entry.target.classList.add('show')
          } else {
            entry.target.classList.remove('show')
          }
        })
      })

      const hiddenElements = document.querySelectorAll('.hidden')
      hiddenElements.forEach((el) => observer.observe(el))
    </script>
  </body>
</html>